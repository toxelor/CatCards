import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Cat {
    breeds: Breed
    id: string
    url: string
}

interface Breed {
    weight: {imperical: string, metric: string}
    name: string
    vetstreet_url: string
    temperament: string
    origin: string
    description: string
    life_span: string
    indoor: number
    lap: number
    alt_names: string
    adaptability: number,
    affection_level: number,
    child_friendly: number,
    dog_friendly: number,
    energy_level: number,
    grooming: number,
    health_issues: number,
    intelligence: number,
    shedding_level: number,
    social_needs: number,
    stranger_friendly: number,
}


export const catsApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "https://api.thecatapi.com/v1/images/search?has_breeds=1&api_key=live_FV79aXndsL6R04E7XVq9jYnUKgUBolhLhXIvQcwuHrqabSAfbOEqYfZWyco7mfTr" }),
    reducerPath: "catsApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Cats"],
    endpoints: build => ({
      // Supply generics for the return type (in this case `QuotesApiResponse`)
      // and the expected query argument. If there is no argument, use `void`
      // for the argument type instead.
      getCats: build.query<Array<Cat>, number>({
        query: (limit = 10) => `&limit=${limit}`,
        // `providesTags` determines which 'tag' is attached to the
        // cached data returned by the query.
        //providesTags: (result, error, id) => [{ type: "Quotes", id }],
      }),
    }),
  })
  
  // Hooks are auto-generated by RTK-Query
  // Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
  export const { useGetCatsQuery } = catsApiSlice
  